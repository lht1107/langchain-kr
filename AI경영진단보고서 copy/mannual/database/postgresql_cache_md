### `postgresql_cache.py` 매뉴얼

`postgresql_cache.py`는 PostgreSQL을 기반으로 하는 비동기 캐시 시스템을 구현하는 모듈입니다. `asyncpg`를 활용하여 비동기 데이터베이스 작업을 수행하며, 신용 분석 데이터를 저장하고 검색하는 기능을 제공합니다.

---

#### 주요 역할

1. **비동기 PostgreSQL 연결 풀 관리**
   - `asyncpg`의 `create_pool`을 활용하여 연결을 관리하고 성능을 최적화.

2. **신용 분석 데이터 저장 및 조회**
   - 기업의 `strength`, `weakness`, `insight` 데이터를 저장 및 검색.

3. **자동 재시도 및 오류 처리**
   - `tenacity` 라이브러리를 사용하여 연결 실패 시 자동으로 재시도.

4. **비동기 데이터베이스 트랜잭션 관리**
   - `asyncpg`의 트랜잭션 기능을 활용하여 안정적인 데이터 처리 수행.

---

#### 주요 클래스 및 함수

1. **`PostgreSQLCache` 클래스**
   - PostgreSQL을 캐시 스토리지로 사용하는 클래스.

   - **생성자(`__init__`)**
     - `table_name`: 기본 테이블 이름.
     - `feedback_table_name`: 피드백 데이터를 저장하는 테이블 이름.
     - `index_name`: 분석 결과용 인덱스 이름.
     - `feedback_index_name`: 피드백 인덱스 이름.

   - **사용 예시**:
     ```python
     cache = PostgreSQLCache(table_name="credit_analysis")
     ```

2. **`initialize_pool()`**
   - PostgreSQL 연결 풀을 생성하는 함수.
   - 자동 재시도(`tenacity.retry`) 기능을 포함하여 실패 시 일정 간격 후 다시 시도.

   - **사용 예시**:
     ```python
     await cache.initialize_pool()
     ```

3. **`get(company_name, analysis_type, analysis_metric)`**
   - 특정 회사의 분석 데이터를 조회하는 함수.
   - 최신 데이터를 기준으로 `strength`, `weakness`, `insight` 데이터를 검색.
   
   - **사용 예시**:
     ```python
     result = await cache.get("ExampleCorp", "strength", "growth")
     print(result)
     ```

4. **`set(nm_comp, value, type_analy)`**
   - 특정 기업의 분석 데이터를 PostgreSQL에 저장.
   - 기존 데이터가 있으면 `UPDATE`, 없으면 `INSERT` 수행.
   
   - **사용 예시**:
     ```python
     data = {
         "strength": {"analysis_metric": "profitability", "detailed_result": "Good", "summary": "Strong profitability"}
     }
     await cache.set("ExampleCorp", data, "strength")
     ```

5. **`close()`**
   - 애플리케이션 종료 시 PostgreSQL 연결 풀을 닫는 함수.

   - **사용 예시**:
     ```python
     await cache.close()
     ```

---

#### 주요 코드 설명

1. **비동기 연결 풀 생성**
   - `asyncpg.create_pool`을 사용하여 최소/최대 연결 개수를 지정하고 연결 풀을 생성합니다.

   ```python
   self._pool = await asyncpg.create_pool(
       dsn=settings.CONNECTION_STRING,
       min_size=settings.POSTGRES_POOL_MIN_SIZE,
       max_size=settings.POSTGRES_POOL_MAX_SIZE
   )
   ```

2. **자동 재시도(`tenacity.retry`) 설정**
   - 연결 시도가 실패하면 `최대 3회` 재시도하며, `2초~10초` 사이의 지수적 증가 간격을 사용.

   ```python
   @retry(
       stop=stop_after_attempt(3),
       wait=wait_exponential(multiplier=1, min=2, max=10),
       reraise=True
   )
   ```

3. **데이터 조회 쿼리**
   - 특정 회사의 `strength`, `weakness`, `insight` 데이터를 검색하며, 최신 날짜를 기준으로 정렬.

   ```python
   base_query = f"""
       SELECT type_analy, type_analy_metric, rslt_dtl_analy, sumry_analy
       FROM {self.table_name}
       WHERE nm_comp = $1 AND type_analy = $2 AND type_analy_metric = $3
       ORDER BY at_created DESC
   """
   ```

4. **데이터 저장(업데이트 & 삽입)**
   - 기존 데이터가 존재하면 `UPDATE`, 없으면 `INSERT` 실행.

   ```python
   update_query = f"""
       UPDATE {self.table_name}
       SET rslt_dtl_analy = $4, sumry_analy = $5, at_created = to_char(now(), 'YYYYMMDDHH24MISS')
       WHERE nm_comp = $1 AND type_analy = $2 AND type_analy_metric = $3
   """
   ```

---

#### 사용 예시

1. **PostgreSQL 캐시 초기화 및 사용**
   ```python
   from postgresql_cache import PostgreSQLCache

   cache = PostgreSQLCache(table_name="credit_analysis")
   await cache.initialize_pool()
   
   # 데이터 저장
   await cache.set("ExampleCorp", {"strength": {"analysis_metric": "growth", "detailed_result": "Strong", "summary": "Positive growth"}}, "strength")
   
   # 데이터 조회
   data = await cache.get("ExampleCorp", "strength", "growth")
   print(data)
   ```

2. **애플리케이션 종료 시 연결 풀 닫기**
   ```python
   await cache.close()
   ```

---

#### 참고 사항

- **환경 변수 설정**:
  - PostgreSQL 연결 정보는 `settings.CONNECTION_STRING`을 통해 관리됩니다.
  - `settings.POSTGRES_POOL_MIN_SIZE`, `settings.POSTGRES_POOL_MAX_SIZE`를 사용하여 연결 풀 크기를 조정할 수 있습니다.

- **데이터 형식 요구사항**:
  - `strength`, `weakness`, `insight` 데이터 구조는 JSON 형식이어야 합니다.

- **확장 가능성**:
  - 추가 분석 유형이 필요한 경우, `type_analy` 값을 확장하면 됩니다.

이 매뉴얼은 `postgresql_cache.py`의 주요 기능과 사용법을 설명하며, PostgreSQL을 활용한 비동기 캐시 관리를 효율적으로 수행할 수 있도록 돕습니다.